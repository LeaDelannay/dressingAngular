/* MAIN.JS */


/* ================ Detection de l'utilisation d'un apareil mobile   ==================== */

var isMobile = {
    Android: function() {
        return window.navigator.userAgent.match(/Android/i);
    },
    BlackBerry: function() {
        return window.navigator.userAgent.match(/BlackBerry/i);
    },
    iOS: function() {
        return window.navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Opera: function() {
        return window.navigator.userAgent.match(/Opera Mini/i);
    },
    Windows: function() {
        return window.navigator.userAgent.match(/IEMobile/i);
    },
    any: function() {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows();
    }
};


/* ================ Ensemble de fonctions qui gère le dynamisme des radio/checkbox/select   ==================== */


/* LISTENER SUR LES GROUPES RADIO POUR AFFICHER / MASQUER DES BLOCS */
/* exemple d'utilisation :  $('[name="inscrit"]').changeRadioListener(); */
jQuery.fn.changeRadioListener = function() {
    var delegateSelector = '[name="' + jQuery(this).attr('name') + '"]'; // Le selecteur à utiliser pour la délégation

    return this.each(function() {
        // On délégue la gestion de l'événement au document dans un soucis de résilience (Ex: rechargement Ajax de la zone)
        jQuery(document).on('change', delegateSelector, function() {
            // Pour chaque élément du groupe de bouton radion on vérifie l'état (selectionné ou pas) et on synchronise l'affichage en fonction
            jQuery(delegateSelector).each(function() {
                var $this = jQuery(this), // Pour futur utilisation dans le contexte de la boucle
                    targetIds = $this.data('target') ? $this.data('target').split(" ") : false; // Est-ce qu'on a un/des blocs à afficher/masquer ?
                if (targetIds) {
                    // Pour chaque bloc associé, on affiche/masque selon que le bouton radio soit selectionné ou pas
                    jQuery.each(targetIds, function(key, value) {
                        // Si le bouton radio est coché...
                        if ($this.is(':checked')) {
                            jQuery('#' + value).removeClass('hidden').addClass('fadeIn'); // .. On s'assure que les blocs associés sont visibles
                        } else {
                            jQuery('#' + value).addClass('hidden').removeClass('fadeIn'); // .. Sinon on s'assure qu'ils sont masqués
                        }
                    });
                    // Dans tous les cas on met à jour l'attribut aria-expanded pour refleter l'affichage mis à jour
                    $this.attr('aria-expanded', $this.is(':checked'));
                }
            });
        });
    });
};

/* LISTENER SUR CHECKBOX POUR AFFICHER / MASQUER UN BLOC */
/* exemple d'utilisation :  $('#nomdelacheckbox').changeCheckboxListener(); */
jQuery.fn.changeCheckboxListener = function() {
    var id,
        $el;

    return this.each(function() {
        $el = jQuery(this);

        $el.change(function() {
            // On affiche le nouveau contenu
            var expanded = jQuery(this).attr('aria-expanded');
            jQuery(this).attr('aria-expanded', !expanded);
            id = jQuery(this).attr('data-target');
            $current = id.split(" ");
            jQuery.each($current, function(key, value) {
                jQuery('#' + value).toggleClass('hidden fadeIn');
            });
        });
    });
};

/* LISTENER SUR SELECT */
/* exemple d'utilisation :  $('#nomduselect').changeSelectListener(); */
jQuery.fn.changeSelectListener = function(selected) {
    var id,
        $el,
        $current,
        $current_input;

    return this.each(function() {
        $el = jQuery(this);
        if (selected) {
            $current = new Array(selected);
            $current_input = jQuery(this);
        }
        $el.change(function() {
            // On masque le contenu précédent

            if (typeof $current !== 'undefined') {
                $.each($current, function(key, value) {
                    jQuery('#' + value).addClass('hidden').removeClass('fadeIn');
                    jQuery('#' + value).attr('aria-expanded', 'false');
                });
            }

            // On affiche le nouveau contenu
            var $option = jQuery(this).find(":selected");
            // console.log($option);
            $option.attr('aria-expanded', 'true');
            id = $option.attr('data-target');
            // console.log(id);
            $current = id.split(" ");
            $current_input = jQuery(this);
            $.each($current, function(key, value) {
                jQuery('#' + value).removeClass('hidden').addClass('fadeIn');
            });
        });
    });
};

/* ================ Fonction de scroll animé (pour le retour en haut de page ou les adresses avec ancres )  ==================== */

/**
 * Fonction pour scroller avec animation vers un élément de la page
 * @var int scrollValue : la nouvelle position du scroll en pixels
 * 					      accepte aussi la valeur "firstError" pour positionner le scroll au niveau de la première erreur ou un sélecteur CSS vers lequel il faut scroll
 * @var timing int : la durée de l'animation
 * @var selector string : le selecteur jQuery pour la racine du scroll. Si null, "html,body"
 **/
function animateScrollTo(scrollValue, timing, selector) {

    var defaults = {
            scrollValue: 0,
            timing: 400,
            selector: 'html,body'
        },
        userOptions = {
            scrollValue: scrollValue,
            timing: timing,
            selector: selector
        },
        options = jQuery.extend(defaults, userOptions);

    // Option pour scroller vers la première erreur ou vers un selecteur
    if (scrollValue === "firstError" || typeof scrollValue !== "number") {
        // On récupére le selecteur pour déterminer la racine à utiliser pour le calcul
        var $rootSelector = options.selector == 'html,body' ? jQuery('body') : jQuery(selector);

        // Si on est dans le contexte d'une modal, la racine doit être l'élément ".modal-dialog", le container étant en overflow scroll
        if ($rootSelector.hasClass('modal')) {
            $rootSelector = $rootSelector.find('.modal-dialog');
        }

        // On détermine le selecteur à utiliser pour calculer la position de l'élément vers lequel on scroll
        var targetSelector = scrollValue === "firstError" ? '.has-error' : scrollValue;

        // On peut enfin calculer la valeur de scroll en calculant la position de la première erreur ou du selecteur.
        options.scrollValue =
            options.selector === 'html,body' ?
            $rootSelector.find(targetSelector).first().offset().top - 65 : // Pour un scroll depuis le body, on calcul l'offset normalement en prenant en compte le menu
            Math.abs($rootSelector.offset().top - $rootSelector.find(targetSelector).first().offset().top) - 5; // Pour une modal, on déduit l'offset à partir de la racine "fixe" et de l'élément en erreur
    }

    jQuery(options.selector).animate({
        scrollTop: options.scrollValue
    }, options.timing); // The number here represents the speed of the scroll in milliseconds
}


/* ================ Fonctions de création et d'animation du loader SVG (cercles animés) ==================== */

function addLoader(position, withBlocker, sizeClass) {
    if (typeof position === "undefined") position = "";
    if (typeof withBlocker === "undefined") withBlocker = true;
    if (typeof sizeClass === "undefined") sizeClass = 'loader';

    if (withBlocker) jQuery("body ").prepend("<div class='loader-blocker'></div>");
    jQuery("body " + position).prepend("<div class='" + sizeClass + "'><svg class='circular' viewBox='25 25 50 50'><circle class='path' cx='50' cy='50' r='20' fill='none' stroke-width='2' stroke-miterlimit='10'/></svg></div>");
}

function removeLoader() {
    jQuery(".loader, .loader-blocker").remove();
}


/* ================ Fonction qui surcharge le javascript de Bootstrap pour gérer les tooltips sur les toogle  ==================== */


// Methode permettant de permuter le contenu des tooltips associés à des boutons ayant un aspect activé / désactivé
function toggleTooltipLabel() {

    jQuery(document).on('click', '[data-toggle="button"]', function() {
        var $this = jQuery(this);

        if ($this.is('[data-tooltip]')) {
            var $tooltipInner, label;
            $tooltipInner = $this.next().find('.tooltip-inner');

            // Le composant "button" de Boostrap change l'attribut aria-pressed selon l'état donc on peut s'appuyer desssus
            if ($this.attr('aria-pressed') == "true") {
                label = $this.data('pressedTitle');
            } else {
                label = $this.data('unpressedTitle');
            }
            $tooltipInner.text(label);
            $this.attr('data-original-title', label);
        } else {
            return;
        }
    });
}

// Methode qui permet de supprimer les tooltips sur les boutons de toggle quand ils ne sont plus survolés par la souris.
function clearTooltip() {
    var $buttons = jQuery('[data-toggle="button"]');
    if ($buttons.length > 0 && $buttons.is('[data-tooltip]')) {
        jQuery(document).on("mouseleave", '[data-toggle="button"]', function() {
            jQuery(this).tooltip('hide');
        });
    }
}

/* ============================  Faute d'avoir développé une solution côté Tapestry, on retire en JS  les error icons du DOM ===============================*/
function removeTapErrorIcon() {
    var tErrorIcons = jQuery('.t-error-icon');
    if (tErrorIcons.length) {
        tErrorIcons.remove();
    }
}

/**
 * Fonction de suppression du contenu d'un champ donné
 * @method initClearInputButtons
 * @return {undefined}
 * La methode attache un listener au document pour surveiller le clic sur les boutons ayant un attribut "data-clear-input".
 * La valeur de data-clear-input est l'ID du champ dont le contenu doit être supprimé
 * Par défault les boutons sont masqués et sont montrés si le champ contient du text
 */
function initClearInputButtons() {
    // De base, tous les boutons clear sont masqués
    jQuery('[data-clear-input]').hide();

    // On délégue la surveillance du clic au document plutôt que de l'attacher à chaque bouton.
    // On s'assure ainsi que même si des boutons de ce types sont insérés/supprimés dans le DOM plus tard, le comportement se déclenchera tout de même
    var clearInputTimer; // On utilise une variable pour se référer au setTimeout et temporiser le déclenchement de l'action
    jQuery(document).on('keyup', "[data-clearable-input]", function() {
        var $this = jQuery(this), // Pour future référence
            $clearButton = jQuery('[data-clear-input="' + $this.attr('id') + '"]'); // Le bouton associé à l'input
        // On commence par annuler le précédent setTimeout si besoin
        clearTimeout(clearInputTimer);
        // On relance un nouveau timer
        clearInputTimer =
            setTimeout(function() {
                // Si un bouton de clear existe
                if ($clearButton) {
                    // Si l'input n'est pas vide et qu'il ne contient pas le contenu du placeholder (compatibilité IE<9), on montre le bouton, sinon on le cache
                    $this.val().length > 0 && $this.val() != $this.attr('placeholder') ? $clearButton.show() : $clearButton.hide();
                }
            }, 100);
    });

    jQuery(document).on('click', '[data-clear-input]', function() {
        var $el = jQuery(this), // L'objet jQuery pour le bouton cliqué
            $target = $el.data('clear-input') ? jQuery('#' + $el.data('clear-input')) : false; // L'input cible (textarea ou input de type text)
        if ($target) { // Si on un objet jQuery valide
            $target.is('[type="text"]') || $target.is('textarea') ? (function() {
                $el.hide();
                $target.focus().val('');
            })() : false; // On efface le contenu de la cible si c'est un input text ou un textarea, on masque le bouton et on met le focus dans l'input
        }
    });
}

/**
 * Gestion de l'ajout de l'état "Chargement" et reset via un évenement custom
 * Customisation au cas par cas via des data-* attributes
 * 	- data-loading-text = le texte à utiliser pour le chargement (le html est autorisé)
 *  - data-loading-reset = le nom de l'événement qui reset le bouton
 * @method initLoadingButtons
 * @param  {jQuery}           $ une référence à jQuery
 * @return {undefined}
 */
var initLoadingButtons = function($) {
    $('body').on('click', '[data-loading]', function() {
        var $this = $(this),
            defaultLoadingTxt = '<span class="loader" aria-hidden="true"></span>', // Le Loader par defaut
            loadingTxt = !$this.attr('data-loading-text') ? defaultLoadingTxt : $this.attr('data-loading-text'), // On récupérer le loader / message à utiliser
            resetEvent = $this.data('loading-reset'); // Le nom de l'événement à surveiller pour reset de l'état loading

        // Si un nom d'événement est donné, on ajoute un handler pour gérer le reset de l'état
        if (resetEvent) {
            $('body').one(resetEvent, function() {
                $this.button('reset').removeClass('active'); // On reset l'état du bouton
            });
        }

        // On passe l'état du bouton à "loading"
        $this
            .data('loadingText', loadingTxt) // On set le message chargement défini plus haut
            .button('loading') // On passe le bouton en mode "Loading"
            .tooltip('hide'); // On masque le tooltip si actifs

        // Begin --- Pour test sur les maquettes seulement
        setTimeout(function() {
            $('body').trigger(resetEvent);
        }, 3000);
        // End --- Pour test les maquettes seulement
    });
}

// Gestion du panel-left en modal pour les filtres
function modalFilters() {
    var windowsize = $(window).width(),
        filterDiv = $('#filters[data-modal-filters]'),
        filterHeader = filterDiv.find('.hd'),
        filterBody = filterDiv.find('.bd');
    if ((filterDiv.attr("data-modal-active") == "false") && windowsize <= 991) {
        filterDiv.attr("data-modal-active", "true");
        filterDiv.wrap("<div class='modal modal-filters' tabindex='-1' role='dialog' aria-label='Affiner la recherche' id='modalFilters'><div class='modal-dialog' role='document'></div></div>");
        filterDiv.addClass('modal-content');
        filterHeader.wrap("<div class='modal-header'></div>");
        filterBody.wrap("<div class='modal-body'></div>");
        filterDiv.append("<div class='modal-footer'><button type='button' class='btn btn-default' data-dismiss='modal' aria-label='Fermer la fenêtre des filtres'>Fermer</button></div>");
    }else if($('#modalFilters').length && windowsize > 991){
        filterDiv.attr("data-modal-active", "false");
        $('#modalFilters').modal('hide');
        filterDiv.unwrap().unwrap();
        filterHeader.unwrap();
        filterBody.unwrap();
        filterDiv.removeClass('modal-content');
        $('.modal-footer').remove();
    }
}

jQuery(document).ready(function($) {
    // On initialise le comportement des boutons "clear"
    initClearInputButtons();
    /* ============================ Fonction qui gère les boutons en état "loading..." ================================= */
    initLoadingButtons($);
    /* ============================ Fonction qui gère la modal des filtres < 991px ================================= */
    modalFilters();
    var resizeModalTimer;
    $( window ).resize( function () {
        clearTimeout( resizeModalTimer );
        modalFilters();
    } );
    /* ================ Gestion des navigateurs obsolètes ==================== */

    try {
        $.reject({
            reject: {
                msie: 7,
                firefox: 16
            },
            closeCookie: true
        });
    } catch (e) {
        //console.log( 'Attention : Le plugin "jquery.reject.js" n\'est pas chargé, il doit ajouter à la liste des JS de base au même titre que jquery et bootstrap' );
    }

    /* ================ Windows Phone 8 Viewport Fix  ==================== */
    if (navigator.userAgent.match(/IEMobile\/10\.0/)) {
        var msViewportStyle = document.createElement("style");
        msViewportStyle.appendChild(
            document.createTextNode(
                "@-ms-viewport{width:auto!important}"
            )
        );
        document.getElementsByTagName("head")[0].
        appendChild(msViewportStyle);
    }

    /* ================ Si l'appareil n'est pas tactile, on génère les tooltips  ==================== */
    if (!isMobile.any()) {
        $('[data-tooltip]').tooltip().removeAttr('title');
    }

    /* ================ Gestion générique si panel-left ou panel-right dans la page  ==================== */

    // On rend la fonctionnalité imperméable au rechargements de zone AJAX
    $('main')
        .on('click', '.btn-panel-left, .btn-panel-right', function(event) {
            var $this = $(this),
                $body = $('body'),
                toggledClass = $this.hasClass('btn-panel-right') ? 'panel-right-visible' : 'panel-left-visible';

            $body.addClass(toggledClass);
            $this.attr('aria-expanded', true); // Volet OUVERT pour les lecteurs d'écran

            // On attache un gestionnaire pour la fermeture du volet au clic sur le panel-center
            // Le gestionnaire sera automatiquement retiré au clic
            $('.panel-center').one('click', function() {
                $body.removeClass(toggledClass);
                $this.attr('aria-expanded', false); // Volet FERMÉ pour les lecteurs d'écran
            });

            $('.btn-panel-close').on('click', function() {
                $body.removeClass(toggledClass);
                $this.attr('aria-expanded', false); // Volet FERMÉ pour les lecteurs d'écran
            });

        });

    /* =============== Fonction de retour en haut de page ================================= */

    if (!$('.link-top').length) {
        $('body').append('<button type="button" class="btn btn-default btn-icon-only sr-only link-top"><i class="icon-chevron-up" aria-hidden="true"></i><span class="sr-only">Remonter en haut de page</span></button>');

        var linkTop = $('.link-top'),
            lastScrollTop = 0;
        $(window).scroll(function() {
            if (linkTop.length > 0 && $(window).scrollTop() >= 200) {
                var st = $(this).scrollTop();
                if (st < lastScrollTop) {
                    linkTop.removeClass('sr-only');
                } else {
                    linkTop.addClass('sr-only');
                }
                lastScrollTop = st;
            } else {
                linkTop.addClass('sr-only');
            }
        });

        $(document).on('click', '.link-top', function(e) {
            e.preventDefault();
            animateScrollTo(0, 700);
            $(this).blur();
        });
    }


    /* ====================== Animation du scroll vers une ancre avec prise en compte du contexte (body ou modale) ================================= */
    $(document).on('click', '[data-scroll="auto"]', function(e) {
        var targetSelector = $(this).attr('href'),
            rootSelector = $(this).parents('.modal').length ? "#" + $(this).parents('.modal').attr('id') : 'html,body';

        e.preventDefault();
        animateScrollTo(targetSelector, 400, rootSelector);
    })

    /* ====================== Scroll vers les ancres ================================= */

    //Cible tous les href
    var anchorScrollSelectors = '.heading [href^="#"], .sommaire [href^="#"], .steps [href^="#"]:not([data-toggle]), .block-icons [href^="#"], .recherche-cv .block-article .btn-primary, .with-scroll, .sub-nav [href^="#"], .main.edito .block-liste-liens .block-item-link[href^="#"]';
    $(document).on('click', anchorScrollSelectors, function(e) {
        var heightHeader = $('header').height();

        if ($('.sub-nav').length && $('.sub-nav').css('position') == 'fixed') {
            var heightSubNav = $('.sub-nav').height() + 39;
            var heightHeader = heightHeader + heightSubNav;
        }

        if (window.location.pathname.replace(/^\//, '') == this.pathname.replace(/^\//, '') && window.location.hostname == this.hostname && this.hash !== "") {
            var target = jQuery(this.hash);
            target = target.length ? target : jQuery('[name=' + this.hash.slice(1) + ']');

            if (target.length) {
                e.preventDefault();
                animateScrollTo(target.offset().top - heightHeader, 700);
            }
            $(target).attr('tabindex', -1).on('blur focusout', function() {
                $(this).removeAttr('tabindex');
                $(this).removeClass('focusanim');
            }).addClass('focusanim').focus();
        }
    });

    /* ===================== Bannière CNIL ================================= */

    setTimeout(function() {
        try {
            //!TODO: Rajouter jquery-eu-cookie-law-popup.js dans tous les pn
            $(document).euCookieLawPopup().init({
                popupPosition: 'bottomleft-mobilebottom',
                agreementExpiresInDays: 365
            });
        } catch (e) {
            //console.log( 'Attention : Le plugin "jquery-eu-cookie-law-popup.js" n\'est pas chargé, il doit ajouter à la liste des JS de base au même titre que jquery et bootstrap' );
        }
    }, 400);

    /* ============================  Initialisation ================================= */
    toggleTooltipLabel();
    clearTooltip();

    removeTapErrorIcon();

    /* ==============  Remplacement des input de type text en type number ou time sur mobile pour faire apparaître le comportement par défaut (clavier numérique / select d'heures et minutes) sur les champs ciblés ============= */

    if (isMobile.any()) {
        $('[data-type]').each(function() {
            var type = $(this).attr('data-type');
            $(this).attr('type', type);
            if($(this).attr('data-mask')){
                $(this).unmask();
            }
        });
    }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
